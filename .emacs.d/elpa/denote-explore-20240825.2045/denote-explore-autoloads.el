;;; denote-explore-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from denote-explore.el

(autoload 'denote-explore-count-notes "denote-explore" "\
Count number of Denote text files and attachments.
A note is defined by `denote-file-types', anything else is an attachment." t)
(autoload 'denote-explore-count-keywords "denote-explore" "\
Count distinct Denote keywords." t)
(autoload 'denote-explore-random-note "denote-explore" "\
Jump to a random Denote file and optionally INCLUDE-ATTACHMENTS.
With universal argument, the sample includes attachments.

(fn &optional INCLUDE-ATTACHMENTS)" t)
(autoload 'denote-explore-random-link "denote-explore" "\
Jump to a random linked note (forward or backward).
With universal argument the sample includes links to attachments." t)
(autoload 'denote-explore-random-keyword "denote-explore" "\
Jump to a random note with selected keyword(s), optionally INCLUDE-ATTACHMENTS.

- Manually select one or more keywords from the active Denote buffer.
- Can override the completion option by adding free text
- Use \"*\" to select all listed keywords.

Selecting multiple keywords requires `denote-sort-keywords' to be non-nil
or target keywords are in the same order as the selection. Alternatively, use
`denote-explore-sort-keywords' to order keywords in all Denote files.

With universal argument the sample includes attachments.

(fn &optional INCLUDE-ATTACHMENTS)" t)
(autoload 'denote-explore-random-regex "denote-explore" "\
Jump to a random not matching a regular expression REGEX.
Use Universal Argument to EXCLUDE-ATTACHMENTS

(fn REGEX &optional INCLUDE-ATTACHMENTS)" t)
(autoload 'denote-explore-identify-duplicate-notes "denote-explore" "\
Identify duplicate Denote IDs or FILENAMES.

If FILENAMES is nil, check Denote IDs, otherwise use complete file names.
Using the FILENAMES option (or using the universal argument) excludes
exported Denote files from duplicate-detection.

Duplicate files are displayed in a temporary buffer with links to the
suspected duplicate files.

(fn &optional FILENAMES)" t)
(autoload 'denote-explore-identify-duplicate-notes-dired "denote-explore" "\
Identify duplicate Denote IDs or FILENAMES.

If FILENAMES is nil, check Denote IDs, otherwise use complete file names.
Using the FILENAMES option (or using the universal argument) excludes
exported Denote files from duplicate-detection.

Duplicate files are displayed `find-dired'.

(fn &optional FILENAMES)" t)
(autoload 'denote-explore-single-keywords "denote-explore" "\
Select a note or attachment with a keyword that is only used once." t)
(autoload 'denote-explore-zero-keywords "denote-explore" "\
Select a note or attachment without any keywords." t)
(autoload 'denote-explore-sort-keywords "denote-explore" "\
Order the file keywords of all Denote files alphabetically.

This function extracts the keywords from the filename. When the keywords are not
in alphabetical order, the file is renamed. The front matter for notes is left
as is. Use `denote-explore-sync-metadata' to synchronise filenames and front
matter." t)
(autoload 'denote-explore-rename-keyword "denote-explore" "\
Rename or remove keyword(s) across the Denote collection.
When selecting more than one existing keyword, all selections are renamed
to the new version. Use an empty string as new keyword to remove the selection.
The filename is taken as the source of truth for metadata and does not modify
the frontmatter. Use `denote-explore-sync-metadata' to synchronise filenames
and frontmatter." t)
(autoload 'denote-explore-sync-metadata "denote-explore" "\
Synchronise filenames with the metadata for all Denote notes.
The front matter is used as the source of truth." t)
(autoload 'denote-explore-barchart-keywords "denote-explore" "\
Create a barchart with the top N most used Denote keywords.

(fn N)" t)
(autoload 'denote-explore-barchart-filetypes "denote-explore" "\
Visualise the Denote file types and optionally only ATTACHMENTS.
With universal argument only visualises attachments, excluding file
types in `denote-file-type-extensions'.

(fn &optional ATTACHMENTS)" t)
(autoload 'denote-explore-barchart-degree "denote-explore" "\
Visualise the degree for each Denote file (total links and backlinks)." t)
(autoload 'denote-explore-backlinks-barchart "denote-explore" "\
Visualise the number of backlinks for each node in the Denote network.

(fn N)" t)
(autoload 'denote-explore-isolated-notes "denote-explore" "\
Identify Denote files without (back)links and optionally INCLUDE-ATTACHMENTS.
Using the universal argument includes attachments.

(fn &optional INCLUDE-ATTACHMENTS)" t)
(autoload 'denote-explore-network "denote-explore" "\
Generate a network of Denote files or keywords by selecting a type.

- Community: Network of notes matching a regular expression.
  Links to notes not matching the regular expression are pruned.
- Neighbourhood: Generate a network of notes from a parent at a given depth.
  Depth = 1 shows linked notes; depth 2 all notes linked to linked notes etc.
- Keywords: Generate network of keywords.  Each note with two or more keywords
  forms a complete graph, which are merged into a weighted undirected graph.

The code generates a nested association list that holds all relevant metadata
for the selected graph:

- Meta data e.g.: `((directed . t) (type . \"Keywords\"))'
- Association list of nodes and their degrees, e.g.:
  `(((id . \"20210104T194405\") (name . \"Platonic Solids\") (keywords \"math\"'
  `\"geometry\") (type . \"org\") (degree . 4)) ...)'.
  In the context of Denote, the degree of a node is the unweighted sum of links
  and backlinks from and to a note.
- Association list of edges and their weights, e.g.:
  `(((source . \"20220529T190246\") (target . \"20201229T143000\")'
  `(weight . 1)) ...)'.
  The weight of an edge indicates the number of time it occurs in the graph.

This list is passed on to an encoding function to generate the desired graph
format.  In the last step, a visualisation function displays the graph in the
external web browser.

The parameters for the generated graph are stored in
`denote-explore-network-previous`, which is used to renegerate the same graph
after making changes to notes with `denote-explore-network-regenerate`.

The `denote-explore-graph-types' variable stores the functions required to
generate and regenerate graphs.

The `denote-explore-network-graph-formats' variable contains a list of functions
to encode and display each graph format." t)
(register-definition-prefixes "denote-explore" '("denote-explore-"))

;;; End of scraped data

(provide 'denote-explore-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; denote-explore-autoloads.el ends here
